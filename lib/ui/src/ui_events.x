// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.1
// LVGL version: 8.3.6
// Project name: Esp32TableSaw_SL

#include "ui.h"
#include <lvgl.h>
#include <stdio.h>
#include <stdlib.h>

#include "/src/StepperMotor.h"

void enterDigitOrDecimal(const char * digitOrDecimal) {
	char pstring[100];
	//sprintf(pstring, "%s %s", "Clicked btn: ", digitOrDecimal);
	//LV_LOG_USER(pstring);

	char * stringValue = lv_label_get_text(ui_lblPosition);
	LV_LOG_USER(stringValue);
	char result[100];

	if (strcmp(stringValue, "0") == 0) { 
		strcpy(result, digitOrDecimal);
	} else {
    	sprintf(result, "%s %s", stringValue, digitOrDecimal);
	}
	//LV_LOG_USER(result);

	lv_label_set_text(ui_lblPosition, result);
}

bool containsComma(const char * str) {
    while (*str != '\0') {
        if (*str == ',') {
            return true;
        }
        ++str;
    }
    return false;
}

float convertString(const char * str) {
    float result = 0.0;
    float decimalFactor = 0.1;
    bool isNegative = false;

    // Gérer le signe négatif
    if (*str == '-') {
        isNegative = true;
        ++str;
    }

    // Conversion de la partie entière
    while (*str >= '0' && *str <= '9') {
        result = result * 10 + (*str - '0');
        ++str;
    }

    // Conversion de la partie décimale
    if (*str == '.') {
        ++str;
        while (*str >= '0' && *str <= '9') {
            result = result + (*str - '0') * decimalFactor;
            decimalFactor *= 0.1;
            ++str;
        }
    }

    // Appliquer le signe négatif si nécessaire
    if (isNegative) {
        result = -result;
    }

    return result;
}


void Move1Clicked(lv_event_t * e)
{
	enterDigitOrDecimal("1");
}

void Move2Clicked(lv_event_t * e)
{
	enterDigitOrDecimal("2");
}

void Move3Clicked(lv_event_t * e)
{
	enterDigitOrDecimal("3");
}

void SetMoveValue(lv_event_t * e)
{
	// Your code here
}



void DeleteMove(lv_event_t * e)
{
	// Your code here
	lv_label_set_text(ui_lblPosition, "0");

}

void Move4Clicked(lv_event_t * e)
{
	// Your code here
	enterDigitOrDecimal("4");
}

void Move5Clicked(lv_event_t * e)
{
	// Your code here
	enterDigitOrDecimal("5");

}

void Move6Clicked(lv_event_t * e)
{
	// Your code here
	enterDigitOrDecimal("6");
}

void Move05Clicked(lv_event_t * e)
{
	// Your code here
	enterDigitOrDecimal("6");
}

void Move7Clicked(lv_event_t * e)
{
	// Your code here
	enterDigitOrDecimal("7");
}

void Move8Clicked(lv_event_t * e)
{
	// Your code here
	enterDigitOrDecimal("8");
}

void Move9Clicked(lv_event_t * e)
{
	// Your code here
	enterDigitOrDecimal("9");
}

void Move025Clicked(lv_event_t * e)
{
	// Your code here
}

void MoveCommaClicked(lv_event_t * e)
{
	// Your code here
	enterDigitOrDecimal(",");
}

void Move0Clicked(lv_event_t * e)
{
	enterDigitOrDecimal("0");
	// Your code here
}

void Move033Clicked(lv_event_t * e)
{
	// Your code here
}

void Move0125Clicked(lv_event_t * e)
{
	// Your code here
}

StepperMotor myStepper();
// Do the movement itself
void MoveToPosition(lv_event_t * e)
{	
	char * stringValue = lv_label_get_text(ui_lblPosition);
	int intValue = atoi(stringValue);

	myStepper.moveToPosition(intValue);
}

void Move12Clicked(lv_event_t * e){}